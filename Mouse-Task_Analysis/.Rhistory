# Again, extract the infos from the models and save them in the lists
test_coeffs <- test_model[["coeffs"]] %>% mutate(iv = iv, dv = dv, dframe = dset_name)
test_coeffs_std <- test_model[["std_coeffs"]] %>% mutate(iv = iv, dv = dv, dframe = dset_name)
test_coeff_list[[paste0(iv, "_", dset_name, "_", dv)]] <- test_coeffs
test_coeff_std_list[[paste0(iv, "_", dset_name, "_", dv)]] <- test_coeffs_std
}
break
}
break
}
# convert each list to a "final results" dataframe and save the final results in a list
test_results <- dplyr::bind_rows(test_coeff_list)
test_results_std <- dplyr::bind_rows(test_coeff_std_list)
test_results <- test_results %>%
dplyr::filter(., grepl("fixed", effect)) %>%
dplyr::filter(., !grepl("Intercept", term)) %>%
dplyr::select(estimate, p.value, term)
compare_with_test <- mouse_task_results[["Task_results_fe_coeffs"]] %>%
dplyr::filter(., grepl("fixed", effect)) %>%
dplyr::filter(., !grepl("Intercept", term)) %>%
dplyr::filter(., grepl("arousal", dv)) %>%
dplyr::filter(., grepl("cutoff_0", dframe)) %>%
dplyr::select(estimate, p.value, term)
write.csv(test_results, "Orig_Pred.csv", row.names=FALSE)
write.csv(compare_with_test, "Within_Between_Pred.csv", row.names=FALSE)
test_std_results <- test_results %>%
dplyr::filter(., grepl("fixed", effect)) %>%
dplyr::filter(., !grepl("Intercept", term)) %>%
dplyr::select(estimate, p.value, term)
test_std_results <- test_results_std %>%
dplyr::filter(., grepl("fixed", effect)) %>%
dplyr::filter(., !grepl("Intercept", term)) %>%
dplyr::select(estimate, p.value, term)
View(test_results_std)
View(test_results_std)
test_std_results <- test_results_std %>%
dplyr::filter(., !grepl("Intercept", term)) %>%
dplyr::select(Std_Coefficient, Parameter)
test_std_results <- test_results_std %>%
dplyr::filter(., !grepl("Intercept", Parameter)) %>%
dplyr::select(Std_Coefficient, Parameter)
compare_with_test_std <- mouse_task_results[["Task_results_fe_std_coeffs"]] %>%
dplyr::filter(., grepl("within|between", Parameter)) %>%
dplyr::filter(., grepl("arousal", dv)) %>%
dplyr::filter(., grepl("cutoff_0", dframe)) %>%
dplyr::select(Std_Coefficient, Parameter)
write.csv(test_results, "Orig_STD_Pred.csv", row.names=FALSE)
write.csv(compare_with_test_std, "Within_Between_STD_Pred.csv", row.names=FALSE)
# A side-by-side plot of the fixed effect coefficients with their confidence intervals per predictor per dataset
# for the random intercept model and the random intercept + random slope model plus the standard deviation of the
# random effects for the random slope + random intercept model
plot_coefficient_estimates <- function (fe_coeff_data, re_coeff_data, title, dot_size=1) {
# split the random intercept + slope data into the fixed effect estimates and the random effect estimates
# the first dataset of the list contains the fixed effect estimates, the second, the random effect estimates
split_re_coeffs <- re_coeff_data %>% group_split(effect)
# random intercept only fixed effect coefficient plot
random_intercept_fixed_eff_plot <- ggplot(fe_coeff_data, aes(x=estimate, y=term, color=dframe, group=dframe)) +
# plot a vline at 0
geom_vline(xintercept = 0, colour = "black", linetype = 2, size=1) +
# plot the fixed effect coefficients with their CIs
geom_pointrange(aes(xmin = conf.low, xmax = conf.high), position=position_dodge(width = 0.6), size=dot_size) +
# plot separator lines between the predictors
geom_hline(yintercept = seq_along(unique(fe_coeff_data$term)) +0.5, colour = "grey60", linetype = "twodash") +
# customize the x- and y-label
xlab("Rand. Intercept Model: Fixed Effect Coeffs with 95% CI") +
ylab("Predictors") +
theme_minimal() +
theme(text = element_text(size = 14)) +
# disable the legend
theme(legend.position="none")
# random intercept plus random slope fixed effect coefficient plot
random_intercept_slope_fixed_eff_plot <- ggplot(split_re_coeffs[[1]], aes(x=estimate, y=term, color=dframe, group=dframe)) +
# plot a vline at 0
geom_vline(xintercept = 0, colour = "black", linetype = 2, size=1) +
# plot the fixed effect coefficients with their CIs
geom_pointrange(aes(xmin = conf.low, xmax = conf.high), position=position_dodge(width = 0.6), size=dot_size) +
# plot separator lines between the predictors
geom_hline(yintercept = seq_along(unique(split_re_coeffs[[1]]$term)) +0.5, colour = "grey60", linetype = "twodash") +
# customize the x- and y-label
xlab("Rand. Intercept & Slope Model: Fixed Effect Coeffs with 95% CI") +
ylab("") +
theme_minimal() +
# hide the y-axis
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), text = element_text(size = 14)) +
# disable the legend
theme(legend.position="none")
# random effects of the slopes plot of the random intercept + slope model
random_intercept_slope_random_plot <- ggplot(split_re_coeffs[[2]], aes(x=estimate, y=term, color=dframe, group=dframe)) +
# plot a vline at 0
geom_vline(xintercept = 0, colour = "black", linetype = 2, size=1) +
# plot the random effect coefficients
geom_point(position=position_dodge(width = 0.6), size=dot_size*3) +
# plot separator lines between the predictors
geom_hline(yintercept = seq_along(unique(split_re_coeffs[[2]]$term)) +0.5, colour = "grey60", linetype = "twodash") +
# customize the labels and the legend text
labs(x="Random Effect Standard Deviations", y="", color="Datasets") +
scale_color_hue(labels = c("dur<5min & z-Par", "2.5*IQR & z-Par", "3.5*IQR & z-Par", "dur<5min & z-Samp", "2.5*IQR & z-Samp", "3.5*IQR & z-Samp")) +
theme_minimal() +
# hide the y-axis
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), text = element_text(size = 14), legend.text = element_text(size = 14))
# merge the plots together
merged_plot <- arrangeGrob(random_intercept_fixed_eff_plot,
random_intercept_slope_fixed_eff_plot,
random_intercept_slope_random_plot,
ncol = 3, widths = c(1, 0.75, 1),
top = textGrob(str_replace_all(title, "_", " "))
)
# save the plot
# use different figure sizes depending on what plot needs to be saved
# for the single predictor result plots, use a width of 20 and height of 12
# for the interaction result plots, use a width of 24 and a height of 14
ggsave(paste0(title,".png"), merged_plot, width = 20, height = 12)
dev.off()
}
View(mouse_task_results)
View(mouse_task_results)
View(mouse_task_results[["Task_results_rs_std_coeffs"]])
View(mouse_task_results[["Task_results_fe_coeffs"]])
View(mouse_task_results[["Task_results_rs_coeffs"]])
View(dataset_list)
View(dataset_list)
View(dataset_list[["cutoff_0"]])
# Test
test_model <- fit_mixed_model(dataset = dataset_list[["cutoff_0"]],
model_formular = 'arousal ~ task_x_flips + (task_x_flips|ID)',
mod_name = paste0("Test"),
plot_diag = F)
summary(test_model[["mod"]])
test_std_model <- datawizard::standardise(test_model[["mod"]])
test_model[["mod"]]
test_data <- dataset_list[["cutoff_0"]] %>%
select(arousal, task_x_flips) %>%
mutate(std = scale(task_x_flips))
View(test_data)
test_std <- dataset_list[["cutoff_0"]] %>%
select(arousal, task_x_flips) %>%
mutate(std = scale(task_x_flips)) %>%
test_model(dataset = .,
model_formular = 'arousal ~ std + (std|ID)',
mod_name = paste0("Test"),
plot_diag = F)
test_std <- dataset_list[["cutoff_0"]] %>%
select(arousal, task_x_flips) %>%
mutate(std = scale(task_x_flips)) %>%
fit_mixed_model(dataset = .,
model_formular = 'arousal ~ std + (std|ID)',
mod_name = paste0("Test"),
plot_diag = F)
test_std <- dataset_list[["cutoff_0"]] %>%
select(arousal, task_x_flips, ID) %>%
mutate(std = scale(task_x_flips)) %>%
fit_mixed_model(dataset = .,
model_formular = 'arousal ~ std + (std|ID)',
mod_name = paste0("Test"),
plot_diag = F)
summary(test_model[["mod"]])
summary(test_std[["mod"]])
View(test_data)
test_std <- dataset_list[["cutoff_0"]] %>%
select(arousal, task_x_flips, ID) %>%
mutate(std = (task_x_flips - mean(task_x_flips)) / sd(task_x_flips)) %>%
fit_mixed_model(dataset = .,
model_formular = 'arousal ~ std + (std|ID)',
mod_name = paste0("Test"),
plot_diag = F)
summary(test_std[["mod"]])
test_std_data <- dataset_list[["cutoff_0"]] %>%
select(arousal, task_x_flips, ID) %>%
mutate(std = (task_x_flips - mean(task_x_flips)) / sd(task_x_flips))
View(test_std_data)
test_std_data <- dataset_list[["cutoff_0"]] %>%
select(arousal, task_x_flips, ID) %>%
mutate(std = (task_x_flips - mean(task_x_flips)) / sd(task_x_flips))
test_std <- fit_mixed_model(dataset = test_std_data,
model_formular = 'arousal ~ std + (std|ID)',
mod_name = paste0("Test"),
plot_diag = F)
summary(test_std[["mod"]])
summary(test_std)
summary(test_std[["mod"]])
View(test_std)
test_std[["std_coeffs"]]
summary(test_std[["mod"]])
test_std_data <- dataset_list[["cutoff_0"]] %>%
select(arousal, task_x_flips, ID) %>%
mutate(std = (task_x_flips - 4) * 10)
test_std <- fit_mixed_model(dataset = test_std_data,
model_formular = 'arousal ~ std + (std|ID)',
mod_name = paste0("Test"),
plot_diag = F)
summary(test_std[["mod"]])
View(test_std_data)
summary(test_model[["mod"]])
View(mouse_task_results)
View(mouse_task_results)
View(mouse_task_results)
View(mouse_task_results[["Task_results_fe_coeffs"]])
View(mouse_task_results[["Task_results_fe_std_coeffs"]])
# get a random dataset, the predictor and the target
control_data <- get_sample_data()
control_pred <- rng_play_dat[["pred"]]
control_target <- rng_play_dat[["target"]]
View(control_data)
View(control_data)
View(control_data)
control_dset <- control_data[["dset"]][1]
View(control_dset)
control_dset <- control_data[["dset"]][[1]]
control_dset <- control_data[["dset"]][[2]]
control_dset <- control_data[["dset"]][[1]]
View(control_data)
View(control_data)
# create an order variable for each participant from the timestamp variable
control_dset <- control_dset %>%
group_by(ID) %>%
arrange(., timestamp) %>%
mutate(., order = 1:n())
View(control_dset)
control_dset <- control_data[["dset"]][[1]]
control_pred <- rng_play_dat[["pred"]]
control_target <- rng_play_dat[["target"]]
# create an order variable for each participant from the timestamp variable
control_dset <- control_dset %>%
group_by(ID) %>%
arrange(., timestamp) %>%
mutate(., order = 1:n()) %>%
ungroup()
# create an order variable for each participant from the timestamp variable
control_dset <- control_dset %>%
group_by(ID) %>%
arrange(., timestamp) %>%
mutate(., order = 1:n()) %>%
ungroup() %>%
select(ID, timestamp, order)
View(control_dset)
control_dset <- control_data[["dset"]][[1]]
control_pred <- rng_play_dat[["pred"]]
control_target <- rng_play_dat[["target"]]
# create an order variable for each participant from the timestamp variable
control_dset <- control_dset %>%
group_by(ID) %>%
arrange(., timestamp) %>%
mutate(., order = 1:n()) %>%
ungroup() %>%
# list the control variables
control_variables <- c('hand', 'sex', 'age','timestamp', 'zoom', 'screen_width',
'screen_height', 'median_sampling_freq')
# create an order variable for each participant from the timestamp variable
control_dset <- control_dset %>%
group_by(ID) %>%
arrange(., timestamp) %>%
mutate(., order = 1:n()) %>%
ungroup() %>%
# list the control variables
control_variables <- c('hand', 'sex', 'age', 'order', 'zoom', 'screen_width',
'screen_height', 'median_sampling_freq')
# get a random dataset, the predictor and the target
control_data <- get_sample_data()
control_dset <- control_data[["dset"]][[1]]
control_pred <- rng_play_dat[["pred"]]
control_target <- rng_play_dat[["target"]]
# create an order variable for each participant from the timestamp variable
control_dset <- control_dset %>%
group_by(ID) %>%
arrange(., timestamp) %>%
mutate(., order = 1:n()) %>%
ungroup()
# list the control variables
control_variables <- c('hand', 'sex', 'age', 'order', 'zoom', 'screen_width',
'screen_height', 'median_sampling_freq')
# run a model only with the control variables
control_model <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~', paste(control_variables, sep = "+"), '+ (1|ID)'),
mod_name = paste0("Control Only Model"),
plot_diag = F)
paste(control_target, '~', paste(control_variables, sep = "+"), '+ (1|ID)')
paste0(control_target, '~', paste(control_variables, sep = "+"), '+ (1|ID)')
paste(control_target, '~', paste0(control_variables, sep = "+"), '+ (1|ID)')
paste(control_target, '~', paste(control_variables, sep = "+"), '+ (1|ID)')
paste(control_target, '~', paste(control_variables, collapse = "+"), '+ (1|ID)')
# run a model only with the control variables
control_model <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~', paste(control_variables, collapse = "+"), '+ (1|ID)'),
mod_name = paste0("Control Only Model"),
plot_diag = F)
View(control_model)
View(control_model[["coeffs"]])
View(control_model[["std_coeffs"]])
View(control_model[["model_diag"]])
# run an interaction model with sex and mouse usage
sex_interaction <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~ sex *', control_pred, '+ (1|ID)'),
mod_name = paste0("Control Only Model"),
plot_diag = F)
View(sex_interaction)
View(sex_interaction)
View(sex_interaction[["coeffs"]])
# run a model with mouse usage as the target and order as a predictor to check
# for a time effect on mouse usage
order_effect <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_pred, '~ order + (1|ID)'),
mod_name = paste0("Order Effect Model"),
plot_diag = F)
View(order_effect)
View(order_effect[["coeffs"]])
View(order_effect)
View(order_effect)
# run a model to check for an order * mouse usage interaction
order_interaction <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~ order *', control_pred, '+ (1|ID)'),
mod_name = paste0("Order Interaction Model"),
plot_diag = F)
View(order_interaction)
View(order_interaction)
View(order_interaction[["coeffs"]])
# run a model with the predictor and all control variables
control_pred_model <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~', paste(control_variables, collapse = "+"), '+', control_pred, '+ (1|ID)'),
mod_name = paste0("Control and Predictor Model"),
plot_diag = F)
View(control_pred_model)
View(control_pred_model)
View(control_pred_model[["coeffs"]])
performance::test_performance(control_model, control_pred_model)
performance::test_performance(control_model, control_pred_model)
performance::test_performance(control_model, control_pred_model)
performance::test_performance(control_model[["mod"]], control_pred_model[["mod"]])
# get a random dataset, the predictor and the target
control_data <- get_sample_data()
control_dset <- control_data[["dset"]][[1]]
control_pred <- rng_play_dat[["pred"]]
control_target <- rng_play_dat[["target"]]
# create an order variable for each participant from the timestamp variable
control_dset <- control_dset %>%
group_by(ID) %>%
arrange(., timestamp) %>%
mutate(., order = 1:n()) %>%
ungroup()
# list the control variables
control_variables <- c('hand', 'sex', 'age', 'order', 'zoom', 'screen_width',
'screen_height', 'median_sampling_freq')
# run a model only with the control variables
control_model <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~', paste(control_variables, collapse = "+"), '+ (1|ID)'),
mod_name = paste0("Control Only Model"),
plot_diag = F)
# run a model with the predictor and all control variables
control_pred_model <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~', paste(control_variables, collapse = "+"), '+', control_pred, '+ (1|ID)'),
mod_name = paste0("Control and Predictor Model"),
plot_diag = F)
performance::test_performance(control_model[["mod"]], control_pred_model[["mod"]])
# run an interaction model with sex and mouse usage
sex_interaction <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~ sex *', control_pred, '+ (1|ID)'),
mod_name = paste0("Sex Interaction Model"),
plot_diag = F)
# run a model with mouse usage as the target and order as a predictor to check
# for a time effect on mouse usage
order_effect <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_pred, '~ order + (1|ID)'),
mod_name = paste0("Order Effect Model"),
plot_diag = F)
# run a model to check for an order * mouse usage interaction
order_interaction <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~ order *', control_pred, '+ (1|ID)'),
mod_name = paste0("Order Interaction Model"),
plot_diag = F)
View(control_pred_model)
View(control_pred_model)
View(control_pred_model[["coeffs"]])
View(sex_interaction)
View(sex_interaction)
View(sex_interaction[["coeffs"]])
sex_interaction[["coeffs"]]
order_effect[["coeffs"]]
# run a model to check for an order * mouse usage interaction
order_interaction <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~ order *', control_pred, '+ (1|ID)'),
mod_name = paste0("Order Interaction Model"),
plot_diag = F)
order_interaction[["coeffs"]]
order_interaction[["diag"]]
order_interaction[["model_diag"]]
order_effect[["model_diag"]]
sex_interaction[["model_diag"]]
sex_interaction[["coeff"]]
sex_interaction[["coeffs"]]
order_effect[["model_diag"]]
order_effect[["coeffs"]]
# get a random dataset, the predictor and the target
control_data <- get_sample_data()
control_dset <- control_data[["dset"]][[1]]
control_pred <- rng_play_dat[["pred"]]
control_target <- rng_play_dat[["target"]]
# get a random dataset, the predictor and the target
control_data <- get_sample_data()
control_dset <- control_data[["dset"]][[1]]
control_pred <- rng_play_dat[["pred"]]
control_target <- rng_play_dat[["target"]]
# get a random dataset, the predictor and the target
control_data <- get_sample_data()
control_dset <- control_data[["dset"]][[1]]
control_pred <- rng_play_dat[["pred"]]
control_target <- rng_play_dat[["target"]]
# get a random dataset, the predictor and the target
control_data <- get_sample_data()
control_dset <- control_data[["dset"]][[1]]
control_pred <- rng_play_dat[["pred"]]
control_target <- rng_play_dat[["target"]]
sample(3:18, size = 1)
sample(3:18, size = 1)
sample(3:18, size = 1)
sample(dvs, size = 1)
sample(dvs, size = 1)
sample(dvs, size = 1)
sample(ivs, size = 1)
sample(ivs, size = 1)
get_sample_data()
get_sample_data()
get_sample_data()
# get a random dataset, the predictor and the target
control_data <- get_sample_data()
control_dset <- control_data[["dset"]][[1]]
control_pred <- control_data[["pred"]]
control_target <- control_data[["target"]]
# create an order variable for each participant from the timestamp variable
control_dset <- control_dset %>%
group_by(ID) %>%
arrange(., timestamp) %>%
mutate(., order = 1:n()) %>%
ungroup()
# list the control variables
control_variables <- c('hand', 'sex', 'age', 'order', 'zoom', 'screen_width',
'screen_height', 'median_sampling_freq')
# run a model only with the control variables
control_model <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~', paste(control_variables, collapse = "+"), '+ (1|ID)'),
mod_name = paste0("Control Only Model"),
plot_diag = F)
# run a model with the predictor and all control variables
control_pred_model <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~', paste(control_variables, collapse = "+"), '+', control_pred, '+ (1|ID)'),
mod_name = paste0("Control and Predictor Model"),
plot_diag = F)
performance::test_performance(control_model[["mod"]], control_pred_model[["mod"]])
# run an interaction model with sex and mouse usage
sex_interaction <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~ sex *', control_pred, '+ (1|ID)'),
mod_name = paste0("Sex Interaction Model"),
plot_diag = F)
sex_interaction[["coeffs"]]
# run a model with mouse usage as the target and order as a predictor to check
# for a time effect on mouse usage
order_effect <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_pred, '~ order + (1|ID)'),
mod_name = paste0("Order Effect Model"),
plot_diag = F)
order_effect[["coeffs"]]
# run a model to check for an order * mouse usage interaction
order_interaction <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~ order *', control_pred, '+ (1|ID)'),
mod_name = paste0("Order Interaction Model"),
plot_diag = F)
order_interaction[["model_diag"]]
order_interaction[["coeffs"]]
# get a random dataset, the predictor and the target
control_data <- get_sample_data()
control_dset <- control_data[["dset"]][[1]]
control_pred <- control_data[["pred"]]
control_target <- control_data[["target"]]
# create an order variable for each participant from the timestamp variable
control_dset <- control_dset %>%
group_by(ID) %>%
arrange(., timestamp) %>%
mutate(., order = 1:n()) %>%
ungroup()
# list the control variables
control_variables <- c('hand', 'sex', 'age', 'order', 'zoom', 'screen_width',
'screen_height', 'median_sampling_freq')
# run a model only with the control variables
control_model <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~', paste(control_variables, collapse = "+"), '+ (1|ID)'),
mod_name = paste0("Control Only Model"),
plot_diag = F)
# run a model with the predictor and all control variables
control_pred_model <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~', paste(control_variables, collapse = "+"), '+', control_pred, '+ (1|ID)'),
mod_name = paste0("Control and Predictor Model"),
plot_diag = F)
performance::test_performance(control_model[["mod"]], control_pred_model[["mod"]])
# run an interaction model with sex and mouse usage
sex_interaction <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~ sex *', control_pred, '+ (1|ID)'),
mod_name = paste0("Sex Interaction Model"),
plot_diag = F)
sex_interaction[["coeffs"]]
# run a model with mouse usage as the target and order as a predictor to check
# for a time effect on mouse usage
order_effect <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_pred, '~ order + (1|ID)'),
mod_name = paste0("Order Effect Model"),
plot_diag = F)
order_effect[["coeffs"]]
# run a model to check for an order * mouse usage interaction
order_interaction <- fit_mixed_model(dataset = control_dset,
model_formular = paste(control_target, '~ order *', control_pred, '+ (1|ID)'),
mod_name = paste0("Order Interaction Model"),
plot_diag = F)
order_interaction[["coeffs"]]
order_interaction[["model_diag"]]
order_interaction[["coeffs"]]
